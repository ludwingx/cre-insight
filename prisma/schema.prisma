generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  username  String   @unique
  password  String
  role      String   @default("user") // admin, user, analyst
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Post {
  id               Int       @id @default(autoincrement())
  id_publicacion   String    @unique
  plataforma       String    @default("facebook")
  fecha            DateTime
  timestamp        BigInt?   // Cambié a BigInt para timestamps grandes
  texto            String    @db.Text // Mejor para textos largos
  me_gusta         Int       @default(0)
  comentarios      Int       @default(0)
  compartidos      Int       @default(0)
  hashtags         String[]  
  tiene_imagen     Boolean   @default(false)
  image_base64     String?   @db.Text // Almacena la imagen en formato base64
  url_publicacion  String    @db.Text
  seguimiento      Boolean   @default(true)
  tipoContenido    String    @default("imagen")// video, imagen o texto
  vistas           Int       @default(0)
  created_at       DateTime  @default(now())
  updated_at       DateTime  @updatedAt
  metrics          PostMetrics[]
}

model PostMetrics {
  id          Int      @id @default(autoincrement())
  postId      Int
  post        Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  likes       Int      @default(0)
  comments    Int      @default(0)
  shares      Int      @default(0)
  views       Int?     @default(0) // Mantener opcional
  collectedAt DateTime @default(now())
  totalInteracciones Int? @default(0) // likes + comments + shares
  engagementRate     Float? // Porcentaje de engagement
  tipoContenido      String? @default("imagen") // Para tracking histórico
  
  @@index([postId, collectedAt])
  @@map("post_metrics") // Opcional: nombre explícito
}

model Mention {
  id               Int      @id @default(autoincrement())
  sourceName       String   // nombre del perfil o grupo que menciona
  sourceUrl        String   // enlace al perfil/grupo/post
  image_base64     String?   @db.Text // Almacena la imagen en formato base64
  platform         String   // Facebook, Instagram, TikTok
  content          String
  mentionUrl       String   @unique
  razon_especifica String?  // "Crítica en grupo Facebook", "Posible falso positivo", etc.
  comentario_principal String? // "Cre ladrones", "Contenido no relacionado", etc.
  publishedAt      DateTime
  collectedAt      DateTime @default(now())
}

model Keyword {
  id        Int      @id @default(autoincrement())
  palabra   String   @unique
  activa    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
